{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/kanokitaguchi/Desktop/Projects/barter-app-84/components/SwipeableFlatlist.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { ListItem, Icon } from \"react-native-elements\";\nimport db from \"../config\";\n\nvar SwipeableFlatlist = function (_React$Component) {\n  _inherits(SwipeableFlatlist, _React$Component);\n\n  var _super = _createSuper(SwipeableFlatlist);\n\n  function SwipeableFlatlist(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeableFlatlist);\n\n    _this = _super.call(this, props);\n\n    _this.updateMarkAsRead = function (notification) {\n      db.collection(\"all_notifications\").doc(notification.doc_id).update({\n        notification_status: \"read\"\n      });\n    };\n\n    _this.onSwipeChangeValue = function (swipeData) {\n      var allNotifications = _this.state.allNotifications;\n      var key = swipeData.key,\n          value = swipeData.value;\n\n      if (value < -Dimensions.get(\"window\").width) {\n        var newData = _toConsumableArray(allNotifications);\n\n        _this.updateMarkAsRead(allNotifications[key]);\n\n        newData.splice(key, 1);\n\n        _this.setState({\n          allNotifications: newData\n        });\n      }\n    };\n\n    _this.renderItem = function (data) {\n      React.createElement(Animated.View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, React.createElement(ListItem, {\n        leftElement: React.createElement(Icon, {\n          name: \"book\",\n          type: \"font-awesome\",\n          color: \"#696969\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 30\n          }\n        }),\n        title: data.item.item_name,\n        titleStyle: {\n          color: \"black\",\n          fontWeight: 'bold'\n        },\n        subtitle: data.item.message,\n        bottomDivider: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }\n      }));\n    };\n\n    _this.renderHiddenItem = function () {\n      return React.createElement(View, {\n        style: styles.rowBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.backRightBtn, styles.backRightBtnRight],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.backTextWhite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, \"Mark as read\")));\n    };\n\n    _this.state = {\n      allNotifications: _this.props.allNotifications\n    };\n    return _this;\n  }\n\n  _createClass(SwipeableFlatlist, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, React.createElement(SwipeListView, {\n        disableRightSwipe: true,\n        data: this.state.allNotifications,\n        renderItem: this.renderItem,\n        renderHiddenItem: this.renderHiddenItem,\n        rightOpenValue: -Dimensions.get(\"window\").width,\n        previewRowKey: \"0\",\n        previewOpenValue: -40,\n        previewOpenDelay: 3000,\n        onSwipeValueChange: this.onSwipeValueChange,\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }));\n    }\n  }]);\n\n  return SwipeableFlatlist;\n}(React.Component);\n\nexport { SwipeableFlatlist as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    flex: 1\n  },\n  backTextWhite: {\n    color: \"#FFF\",\n    fontWeight: \"bold\",\n    fontSize: 15,\n    textAlign: \"center\",\n    alignSelf: \"flex-start\"\n  },\n  rowBack: {\n    alignItems: \"center\",\n    backgroundColor: \"#29b6f6\",\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingLeft: 15\n  },\n  backRightBtn: {\n    alignItems: \"center\",\n    bottom: 0,\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: 0,\n    width: 100\n  },\n  backRightBtnRight: {\n    backgroundColor: \"#29b6f6\",\n    right: 0\n  }\n});","map":{"version":3,"sources":["/Users/kanokitaguchi/Desktop/Projects/barter-app-84/components/SwipeableFlatlist.js"],"names":["React","SwipeListView","ListItem","Icon","db","SwipeableFlatlist","props","updateMarkAsRead","notification","collection","doc","doc_id","update","notification_status","onSwipeChangeValue","swipeData","allNotifications","state","key","value","Dimensions","get","width","newData","splice","setState","renderItem","data","item","item_name","color","fontWeight","message","renderHiddenItem","styles","rowBack","backRightBtn","backRightBtnRight","backTextWhite","container","onSwipeValueChange","index","toString","Component","StyleSheet","create","backgroundColor","flex","fontSize","textAlign","alignSelf","alignItems","flexDirection","justifyContent","paddingLeft","bottom","position","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport {Text, View, Dimensions, Animated, StyleSheet, TouchableHighlight} from 'react-native';\nimport {ListItem, Icon} from \"react-native-elements\";\nimport db from '../config';\n\nexport default class SwipeableFlatlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            allNotifications: this.props.allNotifications\n        }\n    }\n    updateMarkAsRead=notification=>{\n        db.collection(\"all_notifications\")\n            .doc(notification.doc_id)\n            .update({\n                notification_status: \"read\"\n            })\n    }\n\n    onSwipeChangeValue=swipeData=>{\n        var allNotifications = this.state.allNotifications\n        const {key, value} = swipeData;\n        if (value < -Dimensions.get(\"window\").width){\n            const newData = [...allNotifications];\n            this.updateMarkAsRead(allNotifications[key]);\n            newData.splice(key, 1);\n            this.setState({\n                allNotifications: newData,\n            })\n        }\n    }\n    renderItem = data =>{\n        <Animated.View>\n            <ListItem\n                leftElement={<Icon name=\"book\" type=\"font-awesome\" color=\"#696969\"/>}\n                title={data.item.item_name}\n                titleStyle={{color: \"black\", fontWeight: 'bold'}}\n                subtitle={data.item.message}\n                bottomDivider\n            />\n        </Animated.View>\n    }\n\n    renderHiddenItem = () => (\n        <View style={styles.rowBack}>\n          <View style={[styles.backRightBtn, styles.backRightBtnRight]}>\n            <Text style={styles.backTextWhite}>Mark as read</Text>\n          </View>\n        </View>\n      );\n\n    render(){\n        return (\n            <View style={styles.container}>\n              <SwipeListView\n                disableRightSwipe\n                data={this.state.allNotifications}\n                renderItem={this.renderItem}\n                renderHiddenItem={this.renderHiddenItem}\n                rightOpenValue={-Dimensions.get(\"window\").width}\n                previewRowKey={\"0\"}\n                previewOpenValue={-40}\n                previewOpenDelay={3000}\n                onSwipeValueChange={this.onSwipeValueChange}\n                keyExtractor={(item, index) => index.toString()}\n              />\n            </View>\n          );\n    }\n}\n    \n\nconst styles = StyleSheet.create({\n    container: {\n      backgroundColor: \"white\",\n      flex: 1\n    },\n    backTextWhite: {\n      color: \"#FFF\",\n      fontWeight: \"bold\",\n      fontSize: 15,\n      textAlign: \"center\",\n      alignSelf: \"flex-start\"\n    },\n    rowBack: {\n      alignItems: \"center\",\n      backgroundColor: \"#29b6f6\",\n      flex: 1,\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      paddingLeft: 15\n    },\n    backRightBtn: {\n      alignItems: \"center\",\n      bottom: 0,\n      justifyContent: \"center\",\n      position: \"absolute\",\n      top: 0,\n      width: 100\n    },\n    backRightBtnRight: {\n      backgroundColor: \"#29b6f6\",\n      right: 0\n    }\n  });\n  \n"]},"metadata":{},"sourceType":"module"}